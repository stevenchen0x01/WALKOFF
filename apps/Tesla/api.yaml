walkoff: '0.1'
info:
  version: 1.0.0
  title: WebCam
  description: A simple app for webcams. Linux only.
  contact:
    name: Walkoff Team
  license:
    name: Creative Commons
actions:
  'get mobile access':
    run: get_mobile_access
    description: Determines if mobile access to the vehicle is enabled.
    returns:
      Success:
        schema:
          type: boolean
  'get charge state all':
    run: get_charge_state_all
    description: Returns the state of charge in the battery.
    returns:
      Success:
        description: repeated method
        schema:
          type: object
  'get charging state':
    run: get_charging_state
    description: Returns a status code of the cahrging state
    returns:
      Success:
        schema:
          type: string
  'get charge to max range':
    run: get_charge_to_max_range
    description: current std/max-range setting
    returns:
      Success:
        schema:
          type: boolean
  'get max range charge counter':
    run: get_max_range_charge_counter
    returns:
      Success:
        schema:
          type: integer
  'get fast charger present':
    run: get_fast_charger_present
    description: Is the tesla connected to a supercharger
    returns:
      Success:
        schema:
          type: boolean
  'get battery range':
    run: get_battery_range
    description: Gets the rated range for the battery
    returns:
      Success:
        schema:
          type: number
  'get est. battery range':
    run: get_est_battery_range
    description: Gets the estimated range for the battery from recent driving
    returns:
      Success:
        schema:
          type: number
  'get ideal battery range':
    run: get_ideal_battery_range
    description: Gets the range for the battery under ideal conditions
    returns:
      Success:
        schema:
          type: number
  'get battery level':
    run: get_battery_level
    description: Gets the current charge level of the battery
    returns:
      Success:
        schema:
          type: integer
          minimum: 0
          maximum: 100
  'get battery current':
    run: get_battery_current
    description: Gets the electrical current flowing from the battery
    returns:
      Success:
        schema:
          type: number
  'get charger voltage':
    run: get_charger_voltage
    description: Gets the voltage of the charger. (Only has value while charging)
    returns:
      Success:
        schema:
          type: number
  'get charger pilot current':
    run: get_charger_pilot_current
    description: Gets the max current allowed by the charger
    returns:
      Success:
        schema:
          type: number
  'get charger actual current':
    run: get_charger_actual_current
    description: Gets the actual current from the charger
    returns:
      Success:
        schema:
          type: number
  'get charger power':
    run: get_charger_power
    description: Gets the power of the charger (in kW)
    returns:
      Success:
        schema:
          type: number
  'get time to full charge':
    run: get_time_to_full_charge
    description: Gets the time until the Tesla is fully charged
    returns:
      Success:
        schema:
          type: string
  'get charge rate':
    run: get_charge_rate
    description: Gets the rate of charging (in mi/hr). Returns -1 if not charging
    returns:
      Success:
        schema:
          type: number
  'get charge port door open':
    run: get_charge_port_door_open
    description: Gets the state of the charge port.
    returns:
      Success:
        schema:
          type: boolean
  'get climate state':
    run: get_climate_state_all
    description: Gets the state of the climate control system
    returns:
      Success:
        schema:
          type: object
  'get inside temperature':
    run: get_inside_temp
    description: Gets the inside temperature
    returns:
      Success:
        schema:
          type: number
  'get outside temperature':
    run: get_outside_temp
    description: Gets the outside temperature
    returns:
      Success:
        schema:
          type: number
  'get outside temperature':
    run: get_outside_temp
    description: Gets the outside temperature
    returns:
      Success:
        schema:
          type: number
  'get driver temperature setting':
    run: get_driver_temp_setting
    description: Gets the driver's temperature setting
    returns:
      Success:
        schema:
          type: number
  'get passenger temperature setting':
    run: get_passenger_temp_setting
    description: Gets the passenger's temperature setting
    returns:
      Success:
        schema:
          type: number
  'is auto-conditioning on':
    run: get_is_auto_conditioning_on
    description: Is auto-conditioning on?
    returns:
      Success:
        schema:
          type: boolean
  'is front defroster on':
    run: get_is_front_defroster_on
    description: Is the rear defroster on?
    returns:
      Success:
        schema:
          type: boolean
  'is rear defroster on':
    run: get_is_rear_defroster_on
    description: Is the rear defroster on?
    returns:
      Success:
        schema:
          type: boolean
  'get fan status':
    run: get_fan_status
    description: Gets the fan speed
    returns:
      Success:
        schema:
          type: integer
          minimum: 0
          maximum: 6
  'get driving and position state':
    run: get_driving_and_position_all
    description: Gets the fan speed
    returns:
      Success:
        schema:
          type: object
  'get shift state':
    run: get_shift_state
    description: Gets the shift state
    returns:
      Success:
        schema:
          type: string
  'get speed':
    run: get_speed
    description: Gets the speed
    returns:
      Success:
        schema:
          type: number
  'get latitude':
    run: get_latitude
    description: Gets the latitude
    returns:
      Success:
        schema:
          type: number
  'get longitude':
    run: get_longitude
    description: Gets the longitude
    returns:
      Success:
        schema:
          type: number
  'get heading':
    run: get_heading
    description: Gets the compass heading
    returns:
      Success:
        schema:
          type: integer
          minimum: 0
          maximum: 359
  'get gui settings':
    run: get_gui_settings_all
    description: Gets the gui settings
    returns:
      Success:
        schema:
          type: object
  'get gui distance units':
    run: get_gui_distance_units
    description: Gets the units used for the distance in the gui
    returns:
      Success:
        schema:
          type: string
          enum: ['mi/hr', 'km/hr']
  'get gui temperature units':
    run: get_gui_temperature_units
    description: Gets the units used for the temperature in the gui
    returns:
      Success:
        schema:
          type: string
          enum: ['F', 'C']
  'get gui charge rate units':
    run: get_gui_charge_rate_units
    description: Gets the units used for the charge rate in the gui
    returns:
      Success:
        schema:
          type: string
          enum: ['mi/hr', 'km/hr']
  'is gui in 24 hour time format':
    run: get_gui_24_hour_time
    description: Is the GUI dispalying time in 24-hour format
    returns:
      Success:
        schema:
          type: boolean
  'get gui range display':
    run: get_gui_range_display
    description: Get the format of the range display
    returns:
      Success:
        schema:
          type: string
  'get vehicle state':
    run: get_vehicle_state_all
    description: Get the state of the vehicle
    returns:
      Success:
        schema:
          type: object
  'is driver front door open':
    run: get_driver_front_door
    description: Is the front door on the driver's side open?
    returns:
      Success:
        schema:
          type: boolean
  'is driver rear door open':
    run: get_driver_rear_door
    description: Is the rear door on the driver's side open?
    returns:
      Success:
        schema:
          type: boolean
  'is passenger front door open':
    run: get_passenger_front_door
    description: Is the front door on the passenger's side open?
    returns:
      Success:
        schema:
          type: boolean
  'is passenger rear door open':
    run: get_passenger_rear_door
    description: Is the rear door on the passenger's side open?
    returns:
      Success:
        schema:
          type: boolean
  'is front trunk open':
    run: get_front_trunk
    description: Is the front trunk open?
    returns:
      Success:
        schema:
          type: boolean
  'is rear trunk open':
    run: get_rear_trunk
    description: Is the rear trunk open?
    returns:
      Success:
        schema:
          type: boolean
  'get firmware version':
    run: get_car_firmware_version
    description: get the firware version
    returns:
      Success:
        schema:
          type: string
  'is locked':
    run: get_locked
    description: Is the car locked?
    returns:
      Success:
        schema:
          type: boolean
  'is sunroof installed':
    run: get_sunroof_installed
    description: Is the suroof installed
    returns:
      Success:
        schema:
          type: boolean
  'get sunroof state':
    run: get_sunroof_state
    description: Gets the state of the suroof
    returns:
      Success:
        schema:
          type: string
  'get sunroof percent open':
    run: get_sunroof_percent_open
    description: Gets the percentage of the sunroof open
    returns:
      Success:
        schema:
          type: number
          minimum: 0
          maximum: 100
  'are dark rims installed':
    run: get_dark_rims
    description: Are dark rims installed on the wheels
    returns:
      Success:
        schema:
          type: boolean
  'get wheel type':
    run: get_wheel_type
    description: gets the types of wheels installed
    returns:
      Success:
        schema:
          type: string
  'has spoiler':
    run: get_has_spoiler
    description: Does the vehicle have a spoiler?
    returns:
      Success:
        schema:
          type: boolean
  'get roof color':
    run: get_roof_color
    description: gets the color of the roof
    returns:
      Success:
        schema:
          type: string
  'get performance config':
    run: get_perf_config
    description: gets the performance configuration
    returns:
      Success:
        schema:
          type: string
  'wake up':
    run: wake_up
    description: Wakes up the car. Necessary to get some data from the car
    returns:
      Success:
        schema:
          type: boolean
  'set valet mode':
    run: set_valet_mode
    description: sets the car in valet mode
    parameters:
      - name: 'on'
        required: true
        type: boolean
      - name: pin
        description: A 4-digit pin to set/unset valet mode
        type: integer
        minimum: 0
        maximum: 9999
    returns:
      Success:
        schema:
          type: boolean
  'reset valet pin':
    run: reset_valet_pin
    description: resets the valet pin
    returns:
      Success:
        schema:
          type: boolean
  'open charge port':
    run: open_charge_port
    description: Opens the carge port
    returns:
      Success:
        schema:
          type: boolean
  'set charge limit to standard':
    run: set_charge_limit_std
    description: Set the charge mode to standard (90% under the new percentage system introduced in 4.5).
    returns:
      Success:
        schema:
          type: boolean
  'set charge limit to max range':
    run: set_charge_limit_max_range
    description: Set the charge mode to max range (100% under the new percentage system introduced in 4.5). Use sparingly!
    returns:
      Success:
        schema:
          type: boolean
  'set charge limit':
    run: set_charge_limit
    description: sets the charge limit (as a percentage of full charge)
    parameters:
      - name: limit
        required: true
        type: integer
        minimum: 0
        maximum: 100
    returns:
      Success:
        schema:
          type: boolean
  'start charging':
    run: start_charging
    description: starts charging (must be plugged in)
    returns:
      Success:
        schema:
          type: boolean
  'stop charging':
    run: stop_charging
    description: stops charging (must be plugged in)
    returns:
      Success:
        schema:
          type: boolean
  'flash lights':
    run: flash_lights
    description: flashes the lights once
    returns:
      Success:
        schema:
          type: boolean
  'honk horn':
    run: honk_horn
    description: honks the horn once
    returns:
      Success:
        schema:
          type: boolean
  'lock doors':
    run: lock_doors
    description: locks the doors
    returns:
      Success:
        schema:
          type: boolean
  'unlock doors':
    run: unlock_doors
    description: unlocks the doors
    returns:
      Success:
        schema:
          type: boolean
  'set temperature':
    run: set_temperature
    description: unlocks the doors
    parameters:
      - name: driver_deg_c
        description: Driver's side temperature in degrees celsius
        required: true
        type: number
      - name: passenger_deg_c
        description: Passenger's side temperature in degrees celsius
        required: true
        type: number
    returns:
      Success:
        schema:
          type: boolean
  'start hvac':
    run: start_hvac_system
    description: starts the HVAC system
    returns:
      Success:
        schema:
          type: boolean
  'stop hvac':
    run: stop_hvac_system
    description: stops the HVAC system
    returns:
      Success:
        schema:
          type: boolean
  'move pano roof':
    run: move_pano_roof
    description: Moves the panoramic roof (if installed)
    parameters:
      - name: state
        description: States (shortcuts to various percentage openings)
        required: true
        type: string
        enum: [open, close, comfort, vent]
      - name: percent
        description: Percentage open
        required: true
        type: number
        minimum: 0
        maximum: 100
    returns:
      Success:
        schema:
          type: boolean
  'remote start':
    run: remote_start
    description: Starts the vehicle remotely
    returns:
      Success:
        schema:
          type: boolean